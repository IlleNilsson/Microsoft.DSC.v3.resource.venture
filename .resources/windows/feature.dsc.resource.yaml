$schema:  https://aka.ms/dsc/schemas/v3/bundled/resource/manifest.vscode.json
type: Visity.DSC.Windows/Feature
version: 0.1.0
description: Windows OS Edition agnostic feature handling (WindowsFeature for Server & WindowsOptionalFeature for Clients)
# kind: resource
tags:
  - os
  - windows
  - client
  - server
  - agnostic
  - feature
  - optional

get:
  executable: pwsh
  args:
    - -NoLogo
    - -NonInteractive
    - -NoProfile
    - -NoProfileLoadTime
    - -CommandWithArgs
    - |
      #Requires -Version 7.5
      #Requires -PSEdition Core
      #Requires -RunAsAdministrator

      $platform = [System.Environment]::OSVersion.Platform
      $supportedPlatforms = @('Win32NT')
      if (!($supportedPlatforms -contains $platform)) {
          throw New-Object ArgumentException "Unsupported Platform: $platform, supported platforms: $supportedPlatforms"    
      }

      $osType = (Get-CimInstance -ClassName Win32_OperatingSystem).ProductType
      $feature = switch ($osType) {
          1       { Get-WindowsOptionalFeature -Online -FeatureName $args['name'] }
          default { Get-WindowsFeature -Name $args['name'] }  
      }

      if (!$feature) { 
          throw New-Object ArgumentException "Feature '$($args['name'])' not found on Windows OS Type: $osType"
      }

      return $feature | ConvertTo-Yaml
  input: stdin
  return: state

test:
  executable: pwsh
  args:
    - -NoLogo
    - -NonInteractive
    - -NoProfile
    - -NoProfileLoadTime
    - -CommandWithArgs
    - |
      #Requires -Version 7.5
      #Requires -PSEdition Core
      #Requires -RunAsAdministrator

      $platform = [System.Environment]::OSVersion.Platform
      $supportedPlatforms = @('Win32NT')
      if (!($supportedPlatforms -contains $platform)) {
          throw New-Object ArgumentException "Unsupported Platform: $platform, supported platforms: $supportedPlatforms"    
      }

      $osType = (Get-CimInstance -ClassName Win32_OperatingSystem).ProductType
      $feature = switch ($osType) {
          1       { Get-WindowsOptionalFeature -Online -FeatureName $args['name'] }
          default { Get-WindowsFeature -Name $args['name'] }  
      }

      if (!$feature) { 
          throw New-Object ArgumentException "Feature '$($args['name'])' not found on Windows OS Type: $osType"
      }

      return $feature | ConvertTo-Yaml
  input: stdin
  return: state

set:
  executable: pwsh
  args:
    - -NoLogo
    - -NonInteractive
    - -NoProfile
    - -NoProfileLoadTime
    - -CommandWithArgs
    - |
      #Requires -Version 7.5
      #Requires -PSEdition Core
      #Requires -RunAsAdministrator

      $platform = [System.Environment]::OSVersion.Platform
      $supportedPlatforms = @('Win32NT')
      if (!($supportedPlatforms -contains $platform)) {
          throw New-Object ArgumentException "Unsupported Platform: $platform, supported platforms: $supportedPlatforms"    
      }

      $osType = (Get-CimInstance -ClassName Win32_OperatingSystem).ProductType
      $feature = switch ($args['ensure']) {
          'enabled' {
              switch ($osType) {
                  1       { Enable-WindowsOptionalFeature -Online -FeatureName $args['name'] -EA Silent }
                  default { Enable-WindowsFeature -Name $args['name'] -EA Silent }
              }
          }
          'disabled' { 
              switch ($osType) {
                  1       { Disable-WindowsOptionalFeature -Online -FeatureName $args['name'] -EA Silent }
                  default { Disable-WindowsFeature -Name $args['name'] -EA Silent }  
              }
          }
          default {
              throw New-Object ArgumentException "Ensure value '$($args['ensure'])' is not supported"    
          }
      }

      if (!$feature) { 
          throw New-Object ArgumentException "Feature '$($args['name'])' not found on Windows OS Type: $osType"
      }

      return $feature | ConvertTo-Yaml
  implementsPretest: true
  input: stdin
  return: state

validate:
  executable: pwsh
  args:
    - -NoLogo
    - -NonInteractive
    - -NoProfile
    - -NoProfileLoadTime
    - -CommandWithArgs
    - |
      #Requires -Version 7.5
      #Requires -PSEdition Core
      #Requires -RunAsAdministrator

      $platform = [System.Environment]::OSVersion.Platform
      $supportedPlatforms = @('Win32NT')
      if (!($supportedPlatforms -contains $platform)) {
          throw New-Object ArgumentException "Unsupported Platform: $platform, supported platforms: $supportedPlatforms"    
      }
  input: stdin

# schema:
#   embedded:
#     $schema: https://json-schema.org/draft/2020-12/schema
#     $id: file://visity.dsc.windows/feature
#     type: object
#     title: Windows Feature's status
#     description: Information about a Windows Feature's status, Enabled or Disabled

#     properties:
#       name:
#         type: 
#           $ref: #/$defs/name
#         title: Feature Name
#         description: The name of the Windows Feature
#       ensure:
#         type: 
#           $ref: #/$defs/ensure
#         title: Feature Enabled or Disabled
#         description: Desired Windows Feature state, Enabled or Disabled

#     $defs:
#       name:
#         type: string
#         minLength: 1
#       ensure:
#         type: string
#         enum:
#           - enabled
#           - disabled

#     required:
#       - name
#       - ensure

exitCodes:
  0: success
  1: failure
